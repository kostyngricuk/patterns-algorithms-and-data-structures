"use strict";(globalThis.webpackChunkpaads=globalThis.webpackChunkpaads||[]).push([[119],{9797:t=>{t.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","href":"/patterns-algorithms-and-data-structures/docs/intro","label":"Introduction","docId":"intro","unlisted":false},{"type":"category","label":"Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Search Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/patterns-algorithms-and-data-structures/docs/algorithms/search/binary-search","label":"Binary Search","docId":"algorithms/search/binary-search","unlisted":false},{"type":"link","href":"/patterns-algorithms-and-data-structures/docs/algorithms/search/linear-search","label":"Linear Search","docId":"algorithms/search/linear-search","unlisted":false}],"href":"/patterns-algorithms-and-data-structures/docs/category/search-algorithms"},{"type":"category","label":"Sort Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/patterns-algorithms-and-data-structures/docs/algorithms/sort/bubble-sort","label":"Bubble Sort","docId":"algorithms/sort/bubble-sort","unlisted":false},{"type":"link","href":"/patterns-algorithms-and-data-structures/docs/algorithms/sort/merge-sort","label":"Merge Sort","docId":"algorithms/sort/merge-sort","unlisted":false},{"type":"link","href":"/patterns-algorithms-and-data-structures/docs/algorithms/sort/quick-sort","label":"Quick Sort","docId":"algorithms/sort/quick-sort","unlisted":false},{"type":"link","href":"/patterns-algorithms-and-data-structures/docs/algorithms/sort/selection-sort","label":"Selection Sort","docId":"algorithms/sort/selection-sort","unlisted":false}],"href":"/patterns-algorithms-and-data-structures/docs/category/sort-algorithms"}],"href":"/patterns-algorithms-and-data-structures/docs/category/algorithms"}]},"docs":{"algorithms/search/binary-search":{"id":"algorithms/search/binary-search","title":"Binary Search","description":"Binary search is an efficient searching algorithm that finds the position of a target value within a sorted array. It works by repeatedly dividing the search interval in half, comparing the target with the middle element, and eliminating half of the remaining elements at each step.","sidebar":"tutorialSidebar"},"algorithms/search/linear-search":{"id":"algorithms/search/linear-search","title":"Linear Search","description":"Linear search is a simple searching algorithm that finds the position of a target value within an array. It sequentially checks each element of the array until a match is found or the entire array has been searched.","sidebar":"tutorialSidebar"},"algorithms/sort/bubble-sort":{"id":"algorithms/sort/bubble-sort","title":"Bubble Sort","description":"Bubble sort is one of the simplest sorting algorithms. It works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. The algorithm gets its name because smaller elements \\"bubble\\" to the beginning of the list, just like air bubbles rise to the surface of water.","sidebar":"tutorialSidebar"},"algorithms/sort/merge-sort":{"id":"algorithms/sort/merge-sort","title":"Merge Sort","description":"Merge sort is a stable, comparison-based divide-and-conquer sorting algorithm. It works by recursively dividing the array into two halves, sorting each half, and then merging the sorted halves back together. It\'s known for its consistent O(n log n) performance regardless of the input data.","sidebar":"tutorialSidebar"},"algorithms/sort/quick-sort":{"id":"algorithms/sort/quick-sort","title":"Quick Sort","description":"Quick sort is a highly efficient divide-and-conquer sorting algorithm. It works by selecting a \'pivot\' element from the array and partitioning the other elements into two subarrays according to whether they are less than or greater than the pivot. The subarrays are then sorted recursively.","sidebar":"tutorialSidebar"},"algorithms/sort/selection-sort":{"id":"algorithms/sort/selection-sort","title":"Selection Sort","description":"Selection sort is a simple comparison-based sorting algorithm. It works by dividing the array into two parts: a sorted portion at the beginning and an unsorted portion at the end. The algorithm repeatedly finds the minimum element from the unsorted portion and swaps it with the first element of the unsorted portion.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to Patterns, Algorithms and Data Structures - a comprehensive guide to fundamental computer science concepts with practical JavaScript implementations.","sidebar":"tutorialSidebar"}}}}')}}]);